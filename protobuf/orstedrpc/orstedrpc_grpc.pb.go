// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orstedrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrstedRpcClient is the client API for OrstedRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrstedRpcClient interface {
	StartListener(ctx context.Context, in *ListenerReq, opts ...grpc.CallOption) (*ListenerJob, error)
	ListListeners(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ListenerJobList, error)
	DeleteListener(ctx context.Context, in *ListenerJob, opts ...grpc.CallOption) (*EmptyMessage, error)
	ListSessions(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SessionList, error)
	GetSessionById(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Session, error)
	AddTask(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*Task, error)
	ListTask(ctx context.Context, in *Session, opts ...grpc.CallOption) (*TaskList, error)
	GetSingleTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	StartSocks(ctx context.Context, in *Socks, opts ...grpc.CallOption) (*Socks, error)
	HostFile(ctx context.Context, in *Host, opts ...grpc.CallOption) (*ResultMessage, error)
	UnHostFile(ctx context.Context, in *Host, opts ...grpc.CallOption) (*ResultMessage, error)
	ViewHostFile(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HostList, error)
	AddRoute(ctx context.Context, in *RouteReq, opts ...grpc.CallOption) (*Route, error)
	DeleteRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*ResultMessage, error)
	ListRoute(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*RouteList, error)
}

type orstedRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOrstedRpcClient(cc grpc.ClientConnInterface) OrstedRpcClient {
	return &orstedRpcClient{cc}
}

func (c *orstedRpcClient) StartListener(ctx context.Context, in *ListenerReq, opts ...grpc.CallOption) (*ListenerJob, error) {
	out := new(ListenerJob)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/StartListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) ListListeners(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ListenerJobList, error) {
	out := new(ListenerJobList)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/ListListeners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) DeleteListener(ctx context.Context, in *ListenerJob, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/DeleteListener", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) ListSessions(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*SessionList, error) {
	out := new(SessionList)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/ListSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) GetSessionById(ctx context.Context, in *IdMessage, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/GetSessionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) AddTask(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) ListTask(ctx context.Context, in *Session, opts ...grpc.CallOption) (*TaskList, error) {
	out := new(TaskList)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) GetSingleTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/GetSingleTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) StartSocks(ctx context.Context, in *Socks, opts ...grpc.CallOption) (*Socks, error) {
	out := new(Socks)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/StartSocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) HostFile(ctx context.Context, in *Host, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/HostFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) UnHostFile(ctx context.Context, in *Host, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/UnHostFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) ViewHostFile(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*HostList, error) {
	out := new(HostList)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/ViewHostFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) AddRoute(ctx context.Context, in *RouteReq, opts ...grpc.CallOption) (*Route, error) {
	out := new(Route)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) DeleteRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/DeleteRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orstedRpcClient) ListRoute(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*RouteList, error) {
	out := new(RouteList)
	err := c.cc.Invoke(ctx, "/protobuf.OrstedRpc/ListRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrstedRpcServer is the server API for OrstedRpc service.
// All implementations must embed UnimplementedOrstedRpcServer
// for forward compatibility
type OrstedRpcServer interface {
	StartListener(context.Context, *ListenerReq) (*ListenerJob, error)
	ListListeners(context.Context, *EmptyMessage) (*ListenerJobList, error)
	DeleteListener(context.Context, *ListenerJob) (*EmptyMessage, error)
	ListSessions(context.Context, *EmptyMessage) (*SessionList, error)
	GetSessionById(context.Context, *IdMessage) (*Session, error)
	AddTask(context.Context, *TaskReq) (*Task, error)
	ListTask(context.Context, *Session) (*TaskList, error)
	GetSingleTask(context.Context, *Task) (*Task, error)
	StartSocks(context.Context, *Socks) (*Socks, error)
	HostFile(context.Context, *Host) (*ResultMessage, error)
	UnHostFile(context.Context, *Host) (*ResultMessage, error)
	ViewHostFile(context.Context, *EmptyMessage) (*HostList, error)
	AddRoute(context.Context, *RouteReq) (*Route, error)
	DeleteRoute(context.Context, *Route) (*ResultMessage, error)
	ListRoute(context.Context, *EmptyMessage) (*RouteList, error)
	mustEmbedUnimplementedOrstedRpcServer()
}

// UnimplementedOrstedRpcServer must be embedded to have forward compatible implementations.
type UnimplementedOrstedRpcServer struct {
}

func (UnimplementedOrstedRpcServer) StartListener(context.Context, *ListenerReq) (*ListenerJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartListener not implemented")
}
func (UnimplementedOrstedRpcServer) ListListeners(context.Context, *EmptyMessage) (*ListenerJobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListeners not implemented")
}
func (UnimplementedOrstedRpcServer) DeleteListener(context.Context, *ListenerJob) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteListener not implemented")
}
func (UnimplementedOrstedRpcServer) ListSessions(context.Context, *EmptyMessage) (*SessionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedOrstedRpcServer) GetSessionById(context.Context, *IdMessage) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionById not implemented")
}
func (UnimplementedOrstedRpcServer) AddTask(context.Context, *TaskReq) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedOrstedRpcServer) ListTask(context.Context, *Session) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (UnimplementedOrstedRpcServer) GetSingleTask(context.Context, *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleTask not implemented")
}
func (UnimplementedOrstedRpcServer) StartSocks(context.Context, *Socks) (*Socks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSocks not implemented")
}
func (UnimplementedOrstedRpcServer) HostFile(context.Context, *Host) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostFile not implemented")
}
func (UnimplementedOrstedRpcServer) UnHostFile(context.Context, *Host) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnHostFile not implemented")
}
func (UnimplementedOrstedRpcServer) ViewHostFile(context.Context, *EmptyMessage) (*HostList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewHostFile not implemented")
}
func (UnimplementedOrstedRpcServer) AddRoute(context.Context, *RouteReq) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedOrstedRpcServer) DeleteRoute(context.Context, *Route) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoute not implemented")
}
func (UnimplementedOrstedRpcServer) ListRoute(context.Context, *EmptyMessage) (*RouteList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoute not implemented")
}
func (UnimplementedOrstedRpcServer) mustEmbedUnimplementedOrstedRpcServer() {}

// UnsafeOrstedRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrstedRpcServer will
// result in compilation errors.
type UnsafeOrstedRpcServer interface {
	mustEmbedUnimplementedOrstedRpcServer()
}

func RegisterOrstedRpcServer(s *grpc.Server, srv OrstedRpcServer) {
	s.RegisterService(&_OrstedRpc_serviceDesc, srv)
}

func _OrstedRpc_StartListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).StartListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/StartListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).StartListener(ctx, req.(*ListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_ListListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).ListListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/ListListeners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).ListListeners(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_DeleteListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenerJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).DeleteListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/DeleteListener",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).DeleteListener(ctx, req.(*ListenerJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/ListSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).ListSessions(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_GetSessionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).GetSessionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/GetSessionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).GetSessionById(ctx, req.(*IdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).AddTask(ctx, req.(*TaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).ListTask(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_GetSingleTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).GetSingleTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/GetSingleTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).GetSingleTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_StartSocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Socks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).StartSocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/StartSocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).StartSocks(ctx, req.(*Socks))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_HostFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).HostFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/HostFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).HostFile(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_UnHostFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).UnHostFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/UnHostFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).UnHostFile(ctx, req.(*Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_ViewHostFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).ViewHostFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/ViewHostFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).ViewHostFile(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).AddRoute(ctx, req.(*RouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_DeleteRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).DeleteRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/DeleteRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).DeleteRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrstedRpc_ListRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrstedRpcServer).ListRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.OrstedRpc/ListRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrstedRpcServer).ListRoute(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrstedRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.OrstedRpc",
	HandlerType: (*OrstedRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartListener",
			Handler:    _OrstedRpc_StartListener_Handler,
		},
		{
			MethodName: "ListListeners",
			Handler:    _OrstedRpc_ListListeners_Handler,
		},
		{
			MethodName: "DeleteListener",
			Handler:    _OrstedRpc_DeleteListener_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _OrstedRpc_ListSessions_Handler,
		},
		{
			MethodName: "GetSessionById",
			Handler:    _OrstedRpc_GetSessionById_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _OrstedRpc_AddTask_Handler,
		},
		{
			MethodName: "ListTask",
			Handler:    _OrstedRpc_ListTask_Handler,
		},
		{
			MethodName: "GetSingleTask",
			Handler:    _OrstedRpc_GetSingleTask_Handler,
		},
		{
			MethodName: "StartSocks",
			Handler:    _OrstedRpc_StartSocks_Handler,
		},
		{
			MethodName: "HostFile",
			Handler:    _OrstedRpc_HostFile_Handler,
		},
		{
			MethodName: "UnHostFile",
			Handler:    _OrstedRpc_UnHostFile_Handler,
		},
		{
			MethodName: "ViewHostFile",
			Handler:    _OrstedRpc_ViewHostFile_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _OrstedRpc_AddRoute_Handler,
		},
		{
			MethodName: "DeleteRoute",
			Handler:    _OrstedRpc_DeleteRoute_Handler,
		},
		{
			MethodName: "ListRoute",
			Handler:    _OrstedRpc_ListRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/orstedrpc/orstedrpc.proto",
}
